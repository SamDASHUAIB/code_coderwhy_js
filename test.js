/*
  八种数据类型(7 + 1)
    undefined null Boolean String Number Symbol BigInt 以及 Object
    JavaScript不支持任何创建自定义类型的机制。
    所有值都是此 8 种数据类型之一
  7种原始类型 =》栈 小，大小固定。频繁访问，连续空间。
  1种引用类型 =》堆 + 栈 占据空间大，大小不固定，栈中保存指针，堆中保存真正的实体。
*/
/*
  六种为 false
    undefined
    null
    0
    NaN
    ''(空字符串)
    false
*/
/*
  JS中数据类型的判断
  typeof
    原始类型 + function, 排除 null
  instanceof
    正确的判断对象的类型, 机制是原型链, 右边.prototype 在不在左边对象的原型链上。
    精准判断引用数据类型。
    基础数据类型不行。
  constructor
    更改它的原型（覆盖），constructor就会变得不可靠了
  Object.prototype.toString.call()
    不太直观
*/

// 000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object
/*
  undefined 未定义，未赋值
    声明 √
    赋值（定义）×
  null 空对象
    赋值给一些可能会返回对象的变量，作为初始化
*/

/*
  作用域（函数作用域，全局作用域）
    定义函数和变量的地方。
    有一套访问变量的规则，指示浏览器如何在当前作用域以及嵌套的作用域中 根据变量（标识符）进行变量查找。
  作用域链(作用域链的本质上是 一个指向变量对象的指针列表)
    保证对执行环境有权访问的所有变量和函数的有序访问。
    访问外层环境的 变量和函数
    作用域链的 前端 始终都是 当前执行上下文 的变量对象
    全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。
*/
